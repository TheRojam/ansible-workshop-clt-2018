\documentclass[ngerman]{beamer}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[ngerman]{babel}
\usepackage{microtype}
\usepackage{csquotes}
\usepackage[type1,ttscale=.875]{libertine}
\usepackage{inconsolata}
\usepackage{fixltx2e}
\usepackage{listings}
\usepackage{tikz}
\usetikzlibrary{trees}


\usetheme{JuanLesPins}
\usecolortheme{beaver}
\usefonttheme{professionalfonts}

\begin{document}
\title{Server mit Ansible verwalten}
\author{Andreas Krause, Jens Kubieziel, Andreas Scherbaum}
\date{11.\,März~2018}

\begin{frame}
  \maketitle{}
\end{frame}

\section{Einleitung}

\begin{frame}
  \frametitle{Organisatorisches}
\begin{itemize}
\item Geplante Dauer: 3~Stunden
\item Nach einer kurzen Einführung gibt es  Übungen.
\item Wir stellen euch AWS-Instanzen zur Verfügung.
\end{itemize}
\pause{}

Ziel: Betrieb einer kleinen PHP"=Anwendung mit  Web- und Datenbankserver
verwaltet über Ansible
\end{frame}

\begin{frame}
  \frametitle{Wir}
  \framesubtitle{Kurze Vorstellung}
  \begin{itemize}
  \item Andreas Krause
  \item Jens Kubieziel
  \item Andreas Scherbaum
  \end{itemize}
\end{frame}

\section{Einführung in Ansible}

\begin{frame}
  \frametitle{Was ist Ansible?}
  \begin{enumerate}
  \item<+-> Ein Kommunikationsgerät, mit dem ihr mit Überlichtgeschwindigkeit
    kommunizieren könnt (\textsc{Ursula K.\,Le Guin})
  \item<+-> Eine Software, die bei der Verwaltung und der Konfiguration von
    Servern hilft.
  \end{enumerate}
\end{frame}

\begin{frame}
  \frametitle{Warum Ansible?}
  \begin{columns}
    \begin{column}{.5\textwidth}
      \includegraphics[width=\textwidth]{clt17-ansible}
    \end{column}
    \begin{column}{.5\textwidth}  
      \includegraphics[width=\textwidth]{clt17-ansible2}
    \end{column}
  \end{columns}
\end{frame}



\begin{frame}
  \frametitle{Was ist Ansible?}
  \framesubtitle{Details}
  \begin{itemize}
  \item<+-> Werkzeug zur Automatisierung von Administrationsaufgaben
  \item<+-> Freie Software
  \item<+-> in Python entwickelt
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Wie funktioniert Ansible?}
  Ihr beschreibt den gewünschten Zustand der Zielsysteme. Ansible loggt sich per
  SSH ein und führt ggf. gewünschte Aktionen aus.
\end{frame}

\begin{frame}
  \frametitle{Wie funktioniert Ansible?}
  \framesubtitle{Voraussetzungen}
  \begin{itemize}
  \item SSH
  \item Python (Version 2.6 bzw. Python~3)
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Wie installiere ich Ansible?}
  \begin{itemize}
  \item<+-> Über die Paketverwaltung deines GNU/Linux"=Systems:
    \begin{itemize}
    \item \texttt{apt install ansible}
    \item Unter Ubuntu gibt es ein PPA: \texttt{apt-add-repository
        ppa:ansible/ansible}
    \item \texttt{yum install ansible} (ggf. das EPEL"=Repository aktivieren)
    \item \texttt{emerge -av app-admin/ansible}
    \end{itemize}
  \item<+-> Aus den Quellen:
    \begin{itemize}
      
    \item \texttt{pip install ansible}
    \item \texttt{tar.gz} von \url{https://github.com/ansible/ansible/releases}
    \end{itemize}
  \end{itemize}
\end{frame}

\section{Erste Schritte mit Ansible}

\subsection{Erreichbarkeit der Maschinen}

\begin{frame}[fragile]
  \frametitle{Übung 1}
  Bevor wir mit Ansible loslegen, wollen wir wissen, ob ihr euch auf den
  Maschinen einloggen könnt.

  \begin{exampleblock}{}
    Führt die Übung~1 im Verzeichnis \texttt{uebungen/01-ssh} aus.
  \end{exampleblock}
\end{frame}

\begin{frame}
  \frametitle{Übung 2}
  Mit dem ersten Ansible"=Kommando wollen wir die Maschinen anpingen. Woher weiß
  Ansible, mit welchen Maschinen es reden soll?
\end{frame}

\begin{frame}[fragile]
  \frametitle{Inventory}
  Das Inventory sammelt die diversen Systeme und besteht aus einer oder mehreren
  Dateien:
  \begin{exampleblock}{hosts}
    \texttt{192.168.23.42}\\
    \texttt{clt.18.example.org}

    \texttt{[web]}\\
    \texttt{192.168.17.189}\\
    \texttt{clt.18.example.org}
  \end{exampleblock}
\end{frame}

\begin{frame}[fragile,t]
  \frametitle{Inventory}
  \framesubtitle{Format}
  Das Inventory kann im INI"=Format vorliegen \only<3>{oder als YAML"=Datei:}
  \only<2>{  \begin{exampleblock}{hosts}
    \texttt{192.168.23.42}\\
    \texttt{clt.18.example.org}

    \texttt{[web]}\\
    \texttt{192.168.17.189}\\
    \texttt{clt.18.example.org}
  \end{exampleblock}}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Ad-Hoc-Modus}
  Mit dem Aufruf von Ansible auf der Kommandozeile lassen sich verschiedene
  Befehle mitgeben. Diese landen eventuell in der Shellhistory, sind aber
  ansonsten weg. Diese Art von Aufruf wird als \emph{Ad-Hoc-Modus} bezeichnet.
  \pause{}
  
  Der Aufruf enthält die betreffenden Hosts sowie Optionen:
  \begin{description}
  \item[\texttt{-i}] bezeichnet den Ort des Inventorys
  \item[\texttt{-m}]  Modul, welches ausgeführt werden soll
  \item[\texttt{-a}] Argumente zum obigen Modul bzw. Shell"=Kommando (\texttt{command}"=Modul)
  \item[\texttt{-u}] Benutzername (Standard: aktueller Benutzername)
  \item[\texttt{-b}] Aktionen werden mit den Rechten des angegebenen Benutzers ausgeführt
  \end{description}
  \pause{}
  
  \begin{exampleblock}{Hello World}
    \texttt{ansible all -i hosts -a '/bin/echo Hello World'}
  \end{exampleblock}
\end{frame}

\begin{frame}
  \frametitle{Übung 2}
  Für Ansible gibt es das Modul ping, welches einen oder mehrere Hosts
  kontaktiert und das Ergebnis zurückmeldet.
  
  \begin{exampleblock}{}
    Führt die Übung~2 im Verzeichnis \texttt{uebungen/02-ping} aus.
  \end{exampleblock}
\end{frame}

\subsection{Ad-Hoc-Befehle}

\begin{frame}
  \frametitle{Module}
  Module abstrahieren Konfigurations- bzw. Sysadmin"=Aufgaben. Diese machen die
  eigentliche Arbeit. Eine Liste aller verfügbaren Module ist auf
  \url{http://docs.ansible.com/ansible/latest/modules_by_category.html}.
\end{frame}

\begin{frame}
  \frametitle{Module}
  \framesubtitle{Idempotenz}
  Ein wichtiges Konzept von Ansible, wie auch ähnlichen Managementprogrammen,
  ist die \emph{Idempotenz}. Das heißt, ein mehrfacher Aufruf hat denselben
  Effekt wie einmalige Ausführung.

  Module sollten die Idempotenz garantieren, d.\,h. wenn diese feststellen, dass
  der gewünschte Stand erreicht ist, nehmen diese keine Änderung am System vor.
\end{frame}

\begin{frame}[fragile]
  \frametitle{Module}
  \framesubtitle{Dokumentation}
  Die Dokumentation der Module kann über die Kommandozeile mittels
  \texttt{ansible-doc modulname} oder über die Webseite abgerufen werden.

  \begin{exampleblock}{Shellmodul}
    \texttt{ansible-doc shell} oder \url{http://docs.ansible.com/ansible/latest/shell_module.html}
  \end{exampleblock}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Übung 3}
  Führt weitere Ad-Hoc-Befehle aus, siehe \texttt{uebungen/03-addoc}.
\end{frame}

\section{Playbooks}

\subsection{Einführung zu Playbooks}

\begin{frame}
  \frametitle{Playbooks}
  Playbooks sind das zentrale Werkzeug von Ansible. Darüber wird 
  Konfiguration, Deployment und Orchestration gesteuert.

  Ein Playbook besteht aus einem oder mehreren kleinen Anleitungen, die angeben,
  was auf welchen Hostrechnern zu tun ist.
\end{frame}

\begin{frame}
  \frametitle{Playbooks}
  \framesubtitle{Begriffe}
  \begin{description}
  \item[Task] ist der Aufruf eines Moduls mit diversen Parametern.
  \item[Play] ist die Abfolge mehrerer Tasks auf Rechnern aus dem Inventory.
  \item[Playbook] ist eine Zusammenstellung eines oder mehrerer Plays.
  \end{description}
\end{frame}

\begin{frame}
  \frametitle{Playbooks}
  \framesubtitle{Aufruf}
  Die Playbooks werden über einen speziellen Befehl aufgerufen:
  \begin{exampleblock}{Aufruf der Playbooks}
    \texttt{ansible-playbook foo.yml}
  \end{exampleblock}\pause{}

  Was passiert, wenn ein Playbook mehrfach nacheinander aufgerufen wird?
\end{frame}

\begin{frame}[fragile]
  \frametitle{YAML}
  Ansible nutzt die Beschreibungssprache YAML für Playbooks und anderes. Im
  folgenden findet ihr einen kurzen Überblick über die Syntax.
  \pause{}
  
  Der Start eines Dokuments kann durch drei Striche (\texttt{---}) und das Ende
  durch drei Punkte (\texttt{...}) markiert werden.
  \begin{exampleblock}{Das übliche Hallo-Welt-Beispiel}
    \texttt{---}\\
    \texttt{Hallo: Welt}\\
    \texttt{...}
  \end{exampleblock}
\end{frame}

\begin{frame}[fragile]
  \frametitle{YAML}
  \framesubtitle{Syntax}
  \begin{itemize}
  \item<1-> Listen starten mit einem Anstrich (\texttt{-}) und Leerraum.
    \begin{exampleblock}{}
      \texttt{- Hallo}\\
      \texttt{- Welt}
    \end{exampleblock}
  \item<2-> Dictionarys bestehen aus Schlüsselwert, \texttt{:}, Leerzeichen und
    Wert.
    \begin{exampleblock}{}
      \texttt{Hallo: Welt}\\
      \texttt{Linux: Debian}
    \end{exampleblock}
  \end{itemize}
  \pause{}
  Beides lässt sich kombinieren und verschachteln.
\end{frame}

\begin{frame}[fragile]
  \frametitle{YAML}
  \framesubtitle{Beispiel}
  Stellt euch vor, ihr wollt sicherstellen, dass auf einem neuen Host ein
  bestimmter Nutzer angelegt ist, dieser eure Lieblingsshell als Login"=Shell
  hat und diese natürlich installiert ist. Welche Schritte würdet ihr machen, um
  dies zu realisieren?\pause{}
  \begin{exampleblock}{Nutzer anlegen}
\begin{lstlisting}
- hosts: all
  tasks:
  - name: Shell installieren
    apt: name=fish state=installed
  - name: Nutzer anlegen
    user: name=clt18 shell=/usr/bin/fish
\end{lstlisting}
  \end{exampleblock}
\end{frame}

\begin{frame}[fragile]
  \frametitle{YAML}
  \framesubtitle{Variablen}
  Später benötigen wir Variablen:
  \begin{exampleblock}{}
    \texttt{name: "\{\{ Variable \}\}"}
  \end{exampleblock}
\end{frame}

\begin{frame}
  \frametitle{Übung 4}
  Entwerft nun ein Playbook, welches den Hostnamen setzt, einen NTP"=Server
  installiert und sicherstellt, dass der Daemon auch läuft.
\end{frame}

\subsection{Rollen}

\begin{frame}[fragile]
  \frametitle{Rollen}
  \framesubtitle{Einführung}
  Mit den Methoden können wir nun ein großes Playbook schreiben. Aber irgendwann
  kommt der Punkt, wo die Arbeit besser organisiert werden soll. Denn in der
  Regel sollen viele kleine Aufgaben ausgeführt werden statt einer großen.

  Seit Ansible~2.4 gibt es die Möglichkeit, Inhalte anderer Dateien einzubinden
  (\texttt{import} und \texttt{include}).

  Rollen sind ein älteres Mittel. Diese greifen auf eine vordefinierte
  Verzeichnisstruktur zurück und können Tasks ausführen, auf Variablen zugreifen etc.
\end{frame}

\begin{frame}[fragile]
  \frametitle{Rollen}
  \framesubtitle{Verzeichnisstruktur}
  \begin{columns}
    \begin{column}{.6\textwidth}
      \begin{itemize}
      \item<+-> Mindestens eines der Verzeichnisse muss existieren
      \item<+-> Die existierenden Verzeichnisse müssen eine Datei mit dem Namen
        \texttt{main.yml} enthalten.
      \end{itemize}
    \end{column}
    \begin{column}{.4\textwidth}
      \tikzstyle{every node}=[draw=black,thick,anchor=west]
      \tikzstyle{selected}=[draw=red,fill=red!30]
      \tikzstyle{optional}=[dashed,fill=gray!50]
      \begin{tikzpicture}[%
        grow via three points={one child at (0.5,-0.7) and two children at
          (0.5,-0.7) and (0.5,-1.4)}, edge from parent
        path={(\tikzparentnode.south) |- (\tikzchildnode.west)}]
        \node {/} child { node {roles} child { node {Rolle}
            child { node {tasks}} child { node {handlers}} child { node {files}}
            child { node {templates}} child { node {vars}} child { node
              {defaults}} child { node {meta}} }} ;
      \end{tikzpicture}
    \end{column}
  \end{columns}
\end{frame}
\begin{frame}
  \frametitle{Rollen}
  \framesubtitle{Inhalt der Verzeichnisse}
  \begin{description}
  \item[tasks] enthalten die Liste an Tasks, die durch die Rolle ausgeführt wird
  \item[handlers]  Handler, die durch die Rolle benutzt werden
  \item[files]  Dateien, die von dieser Rolle benutzt werden
  \item[templates]  Templates, die dann deployt werden
  \item[vars] Variablen für die Rolle
  \item[defaults] Standardwerte für Variablen
  \item[meta] Abhängigkeiten der Rolle
  \end{description}
\end{frame}

\begin{frame}
  \frametitle{Übung 5}
  In der vorigen Übung haben wir den Hostnamen gesetzt und einen NTP"=Server
  installiert. Baut das nun um, dass diese Aufgaben als Rolle ausgeführt werden.
\end{frame}

\begin{frame}
  \frametitle{Übung 6}
  Jetzt gehen wir einen Schritt weiter und bauen uns eine
  \enquote{Serverlandschaft} auf. Wir haben Server, die als Webserver und
  solche, die als Datenbankserver fungieren. Bastelt jetzt Rollen, die
  in Abhängigkeit vom Host die entsprechenden Pakete installieren.
  \begin{columns}
    \begin{column}{.5\textwidth}
      \begin{exampleblock}{Webserver}
        \begin{itemize}
        \item apache2
        \item apache2-utils
        \item libapache2-mod-php
        \item php
        \item php-dev
        \item php-pgsql
        \item php-pear
        \item php-gettext
        \end{itemize}
      \end{exampleblock}
    \end{column}
    \begin{column}{.5\textwidth}
      \begin{exampleblock}{PostgreSQL}
        \begin{itemize}
        \item postgresql
        \item postgresql-client
        \item postgresql-contrib
        \item python-psycopg2
        \item postgresql-client-common
        \item postgresql-client
        \end{itemize}
      \end{exampleblock}
    \end{column}
  \end{columns}
\end{frame}



\end{document}
